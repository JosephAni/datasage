---
description: 
globs: 
alwaysApply: true
---
# Flask Route Standards

## Critical Rules

- All routes must include appropriate HTTP method decorators
- Implement proper error handling and return appropriate HTTP status codes
- Use type hints for function parameters
- Include docstrings with request/response specifications
- Validate request data before processing
- Use session management securely
- Implement CSRF protection for forms
- Return JSON responses for API endpoints
- Log important operations and errors
- Use blueprints for route organization

## Examples

<example>
```python
@app.route('/api/data', methods=['POST'])
def process_data():
    """
    Process uploaded data file.
    
    Request:
        - file: multipart/form-data
    Response:
        - 200: JSON with processed data
        - 400: Invalid file format
        - 500: Processing error
    """
    try:
        if 'file' not in request.files:
            return jsonify({'error': 'No file provided'}), 400
            
        file = request.files['file']
        if not allowed_file(file.filename):
            return jsonify({'error': 'Invalid file format'}), 400
            
        result = process_file(file)
        return jsonify(result), 200
    except Exception as e:
        logger.error(f"Error processing file: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500
```
</example>

<example type="invalid">
```python
@app.route('/data')
def process():
    # No error handling or input validation
    file = request.files['file']
    result = process_file(file)
    return jsonify(result)
```
</example>
